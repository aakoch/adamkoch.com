extends ../templates/blogpost
block variables
  - var title = 'Fade Out On MouseOver Demo'

append head
  link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/github.min.css")
  script(src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js")
  style(type="text/scss").
    code {
      white-space: pre;
    }
    #fadeOutDemo span {
      display: inline-block;
      position: relative;
      opacity: 1;
      &.myFadeOut {
        opacity: 0;
        transition: opacity 2s;
      }

      z-index: 2;
    }
    #scrollHelp {
      position: fixed;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 1.8em;
      font-size: 1.5em;
      background-color: rgba(255,255,255,.9);
      text-align: center;
      opacity: 0;
      z-index: 1;
      &.myFadeOut {
        z-index: 1;
        opacity: 0;
        transition: opacity 2s, z-index 2s;
      }
      &.myFadeIn {
        z-index: 3;
        opacity: 1;
        transition: opacity .5s, z-index .5s;
      }
    }


block body
  .container#fadeOutDemo
    p Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi mollis accumsan mattis. Aenean eros magna, maximus nec accumsan at, ultrices non velit. Duis tempus tellus a lectus dignissim, consectetur hendrerit urna lacinia. Nam vitae placerat tortor. Phasellus non odio blandit, posuere urna in, pulvinar ligula. Quisque et tincidunt sapien. Proin eget nibh vitae justo pulvinar tincidunt. In hac habitasse platea dictumst. In non accumsan lacus, in consequat nisl. Nunc sodales luctus nunc. Aenean vitae sem consectetur, semper quam a, venenatis sem. Quisque posuere erat at neque bibendum ornare nec a magna. Praesent aliquam commodo luctus. Nulla facilisi.

    p Maecenas pulvinar, nulla a dictum pulvinar, sapien justo dapibus metus, et luctus libero dolor elementum dui. Praesent et libero sed odio dapibus accumsan ac sit amet justo. Vivamus eu massa nec nunc fringilla mollis et sed enim. Nulla facilisi. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam iaculis sollicitudin sodales. Sed gravida vel magna nec mollis. Vestibulum eget nibh magna. Nunc congue vitae purus id mattis. Nunc malesuada non eros in facilisis. Nunc blandit lectus hendrerit blandit facilisis. Quisque vitae dolor lectus. Duis tortor erat, pharetra a nulla ac, varius porttitor sapien. Sed tellus lectus, posuere ut tincidunt sit amet, eleifend id neque. Vestibulum sed commodo nunc, ac maximus nunc.

    p Maecenas sed lorem accumsan, luctus eros eu, tempor dolor. Vestibulum lorem est, bibendum vel vulputate eget, vehicula eu elit. Donec interdum cursus felis, vitae posuere libero. Cras et lobortis velit. Pellentesque in imperdiet justo. Suspendisse dolor mi, aliquet at luctus a, suscipit quis lectus. Etiam dapibus venenatis sem, quis aliquam nisl volutpat vel. Aenean scelerisque dapibus sodales. Vestibulum in pretium diam. Quisque et urna orci.

    p Nulla posuere sem a enim fringilla, id maximus nisi ornare. Nam ac sollicitudin turpis, sit amet pretium mi. In hac habitasse platea dictumst. Integer non mi sagittis, viverra elit vel, rutrum mi. Pellentesque at tellus tincidunt, mollis nisi at, luctus neque. Nam quis velit eu risus efficitur efficitur non et risus. Etiam quis purus risus. Nam sagittis at elit a laoreet. Morbi facilisis lectus sed felis hendrerit eleifend. Aenean nisl eros, dapibus vel vulputate nec, porttitor sit amet dui. Nullam lobortis augue quam, ac dapibus tortor pharetra ac. In nec scelerisque ipsum.

    p Etiam vel mi sollicitudin, luctus velit vitae, accumsan velit. Phasellus non feugiat metus, eu dignissim nulla. Cras ex arcu, faucibus ac hendrerit sit amet, volutpat sit amet justo. Donec ligula lacus, iaculis a lobortis et, facilisis vitae metus. Nulla id massa in turpis efficitur ornare. Quisque euismod fringilla lorem a placerat. Praesent non velit orci. Suspendisse vel mi sed tellus tincidunt venenatis. Phasellus eu tempor nisi. Nullam rutrum consequat euismod. Cras ut blandit erat. Sed iaculis, ex nec finibus vehicula, mauris ligula placerat lacus, dictum viverra neque lectus eget dolor. Nullam finibus ligula vitae lacus eleifend, id sagittis leo molestie.

  #scrollHelp Use 2 fingers to scroll

  .container 
    h2 The (Original) Code:
    h3.monospace style(type="text/scss")
    pre: code(class="language-scss").
      #fadeOutDemo span {
        display: inline-block;
        opacity: 1;
        &.myFadeOut {
          opacity: 0;
          transition: opacity 2s;
        }
      }

    h3.monospace script
    pre: code.
      Array
        .from(document
          .getElementById('fadeOutDemo')
          .getElementsByTagName('p'))
        .forEach(function (paragraph) {
          paragraph.innerHTML = paragraph.innerText.split(' ').map(function(word) {
            return '&lt;span&gt;' + word + '&lt;/span&gt;'
          }).join(' ');
          paragraph.addEventListener('mouseover', function(event)  {
              if (event.target.className.length == 0)
                event.target.className = 'myFadeOut'
          })
        })

    script.

      /** Detect free variable `global` from Node.js. */
      var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

      /** Detect free variable `self`. */
      var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

      /** Used as a reference to the global object. */
      var root = freeGlobal || freeSelf || Function('return this')();

      /**
      * Gets the timestamp of the number of milliseconds that have elapsed since
      * the Unix epoch (1 January 1970 00:00:00 UTC).
      *
      * @static
      * @memberOf _
      * @since 2.4.0
      * @category Date
      * @returns {number} Returns the timestamp.
      * @example
      *
      * _.defer(function(stamp) {
      *   console.log(_.now() - stamp);
      * }, _.now());
      * // => Logs the number of milliseconds it took for the deferred invocation.
      */
      var now = function() {
        return root.Date.now();
      };


      /**
      * Checks if `value` is the
      * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
      * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
      *
      * @static
      * @memberOf _
      * @since 0.1.0
      * @category Lang
      * @param {*} value The value to check.
      * @returns {boolean} Returns `true` if `value` is an object, else `false`.
      * @example
      *
      * _.isObject({});
      * // => true
      *
      * _.isObject([1, 2, 3]);
      * // => true
      *
      * _.isObject(_.noop);
      * // => true
      *
      * _.isObject(null);
      * // => false
      */
      function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
      }
      /**
      * Converts `value` to a number.
      *
      * @static
      * @memberOf _
      * @since 4.0.0
      * @category Lang
      * @param {*} value The value to process.
      * @returns {number} Returns the number.
      * @example
      *
      * _.toNumber(3.2);
      * // => 3.2
      *
      * _.toNumber(Number.MIN_VALUE);
      * // => 5e-324
      *
      * _.toNumber(Infinity);
      * // => Infinity
      *
      * _.toNumber('3.2');
      * // => 3.2
      */
      function toNumber(value) {
        if (typeof value == 'number') {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject(other) ? (other + '') : other;
        }
        if (typeof value != 'string') {
          return value === 0 ? value : +value;
        }
        value = baseTrim(value);
        var isBinary = reIsBinary.test(value);
        return (isBinary || reIsOctal.test(value))
          ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
          : (reIsBadHex.test(value) ? NAN : +value);
      }
      /**
      * Creates a debounced function that delays invoking `func` until after `wait`
      * milliseconds have elapsed since the last time the debounced function was
      * invoked. The debounced function comes with a `cancel` method to cancel
      * delayed `func` invocations and a `flush` method to immediately invoke them.
      * Provide `options` to indicate whether `func` should be invoked on the
      * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
      * with the last arguments provided to the debounced function. Subsequent
      * calls to the debounced function return the result of the last `func`
      * invocation.
      *
      * **Note:** If `leading` and `trailing` options are `true`, `func` is
      * invoked on the trailing edge of the timeout only if the debounced function
      * is invoked more than once during the `wait` timeout.
      *
      * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
      * until to the next tick, similar to `setTimeout` with a timeout of `0`.
      *
      * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
      * for details over the differences between `_.debounce` and `_.throttle`.
      *
      * @static
      * @memberOf _
      * @since 0.1.0
      * @category Function
      * @param {Function} func The function to debounce.
      * @param {number} [wait=0] The number of milliseconds to delay.
      * @param {Object} [options={}] The options object.
      * @param {boolean} [options.leading=false]
      *  Specify invoking on the leading edge of the timeout.
      * @param {number} [options.maxWait]
      *  The maximum time `func` is allowed to be delayed before it's invoked.
      * @param {boolean} [options.trailing=true]
      *  Specify invoking on the trailing edge of the timeout.
      * @returns {Function} Returns the new debounced function.
      * @example
      *
      * // Avoid costly calculations while the window size is in flux.
      * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
      *
      * // Invoke `sendMail` when clicked, debouncing subsequent calls.
      * jQuery(element).on('click', _.debounce(sendMail, 300, {
      *   'leading': true,
      *   'trailing': false
      * }));
      *
      * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
      * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
      * var source = new EventSource('/stream');
      * jQuery(source).on('message', debounced);
      *
      * // Cancel the trailing debounced invocation.
      * jQuery(window).on('popstate', debounced.cancel);
      */
      function debounce(func, wait, options) {
        var lastArgs,
            lastThis,
            maxWait,
            result,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = 'maxWait' in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        function invokeFunc(time) {
          var args = lastArgs,
              thisArg = lastThis;

          lastArgs = lastThis = undefined;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }

        function leadingEdge(time) {
          // Reset any `maxWait` timer.
          lastInvokeTime = time;
          // Start the timer for the trailing edge.
          timerId = setTimeout(timerExpired, wait);
          // Invoke the leading edge.
          return leading ? invokeFunc(time) : result;
        }

        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              timeWaiting = wait - timeSinceLastCall;

          return maxing
            ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
            : timeWaiting;
        }

        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;

          // Either this is the first call, activity has stopped and we're at the
          // trailing edge, the system time has gone backwards and we're treating
          // it as the trailing edge, or we've hit the `maxWait` limit.
          return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
            (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
        }

        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          // Restart the timer.
          timerId = setTimeout(timerExpired, remainingWait(time));
        }

        function trailingEdge(time) {
          timerId = undefined;

          // Only invoke if we have `lastArgs` which means `func` has been
          // debounced at least once.
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = undefined;
          return result;
        }

        function cancel() {
          if (timerId !== undefined) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined;
        }

        function flush() {
          return timerId === undefined ? result : trailingEdge(now());
        }

        function debounced() {
          var time = now(),
              isInvoking = shouldInvoke(time);

          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;

          if (isInvoking) {
            if (timerId === undefined) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              // Handle invocations in a tight loop.
              clearTimeout(timerId);
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }


      let scrollHelpDisplayed = false;
      const scrollHelp = document.getElementById('scrollHelp')
      let scrollHelpTimeout = 0
      let i = 0
      let startX = 0
      let startY = 0
      let startRadiusX = 0
      let startRadiusY = 0
      let allowed = false
      Array
        .from(document
          .getElementById('fadeOutDemo')
          .getElementsByTagName('p'))
        .forEach(function (paragraph) {
          paragraph.innerHTML = paragraph.innerText.split(' ').map(function(word) {
            return `<span data-word="${word}">${word}</span>`
          }).join(' ');
        function handleGestureStart(event) {
          alert('Not yet supported on iOS')
        }
        function handleTouchStart(evt) {
              evt.preventDefault();
          if (evt.changedTouches.length == 1) {
            let touch = evt.changedTouches[0];
            startX = touch.pageX
            startY = touch.pageY 
            startRadiusX = touch.radiusX
            startRadiusY = touch.radiusY
          }
        }
        function handleTouchEnd(event) {
          scrollHelpDisplayed = false;
        }
        const handleTouchMove = debounce(function (evt) {
              evt.preventDefault();
              evt.stopPropagation();
            let touch = evt.changedTouches[0];

            if (Math.abs(startX - touch.pageX) > startRadiusX) {
              allowed = true
            }
            else {
              allowed = false;
            }

          if (allowed) {
              evt.preventDefault();
              evt.stopPropagation();
            if (!scrollHelpDisplayed) {
              scrollHelpDisplayed = true;
              
              scrollHelp.classList.add('myFadeIn')
              scrollHelp.classList.remove('myFadeOut')
              //- scrollHelp.addEventListener('animationend', function() {
              //- }, { once: true, passive: false })

              scrollHelpTimeout = setTimeout(function () {
                scrollHelp.classList.add('myFadeOut')
                scrollHelp.classList.remove('myFadeIn')
              }, 2000)
            }

            if (evt.changedTouches.length == 1) {
              console.log(i++)
              //- console.log(event.target)
              //- console.log(event.targetTouches)
              var myLocation = evt.changedTouches[0];
              var realTarget = document.elementFromPoint(myLocation.clientX, myLocation.clientY);

              if (!!realTarget && !realTarget.dataset.faded) {
                //- console.log(event.changedTouches[0])
                realTarget.classList.add('myFadeOut')
                realTarget.dataset.faded = true
                //- let target = event.target
                //- if (isSpan(target)) {
                  //- event.target.classList.add('myFadeOut')
                //- }
              }
            }
          }
        }, 5)
        //- let isSpan = _.debounce(function (el) {
        //-   console.dir(el);
        //-   debugger;
        //- }, 5000);

        function handleMouseOver(event) {
          event.target.classList.add('myFadeOut')
        }
        //- function handleMouseMove(event) {
        //-       event.preventDefault();
        //-       event.stopPropagation();
        //- }
        document.addEventListener('gesturestart', handleGestureStart) 
        document.addEventListener('touchstart', handleTouchStart, {passive: false})
        document.addEventListener('touchend', handleTouchEnd)
        document.addEventListener("touchmove", handleTouchMove, {passive: false});
        paragraph.addEventListener('mouseover', handleMouseOver)
        //- paragraph.addEventListener('mousemove', handleMouseMove)
      })

      setTimeout(hljs.highlightAll, 1)