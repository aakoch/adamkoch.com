- var title = 'jq'

.container
  h1 #{title}
  
  p jq is a command line tool for processing JSON.
  p 
    a(href="https://stedolan.github.io/jq/") jq Homepage
    |  (
    a(href="https://stedolan.github.io/jq/manual/") Documentation
    | )

  h2 Installation
  p.mb-1 Easiest way is using 
    a(href="https://brew.sh/") Homebrew
    | :
  .mb-2
    code brew install jq

  h2 Examples

  p.mb-1 Combined with 
    a(href="https://github.com/infovore/wxr_to_json") wxr_to_json
    | , I was able to take my Wordpress site and create JSON entries:
  code
    pre.
      git clone git@github.com:infovore/wxr_to_json.git
      cd wxr_to_json
      ./wxr_to_json.js ~/Downloads/adamkoch.WordPress.2021-08-09.xml > output.json

  p.mb-1 I can't remember if I even got this working:
  code
    pre.
      for f in $(ls -R **/index.json)
      do
        jq -r '"- var id=" + .["wp:post_id"] + "\n- var path=" + (.link | sub("https://www.adamkoch.com/"; "")) + (if (.tidyTags | length > 0) then ("\n- var tags=\"" + (.tidyTags | join(",")) + "\"") else "" end) + "\n- var publishedDate=\"" + (.["wp:post_date_gmt"] | sub(" "; "T") + "Z") + "\"\n" + (.["content:encoded"])' $f > $f.html
        grep -v "^- var.*" $f.html | html2pug > $f.pug
      done      

  p: a(routerLink="..") &larr; Back to Code Samples
  p: a(routerLink="../..") &larr; Back to Tech

//- //- include ../../../../templates/footer

//- block body_scripts

app-footer